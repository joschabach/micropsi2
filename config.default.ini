##################################################
#
# Configuration for the micropsi2 toolkit.
#
# Copy this file to config.ini to customize it.
#
##################################################

[micropsi2]

# the directory where your nodenet-data, world-data
# native modules and nodefunctions reside
data_directory = ~/micropsi_code

# optional fine-grained folder configurations overwriting
# the default specified in data_directory
; agent_directory = ~/micropsi_code
; world_directory = ~/micropsi_code
; persistency_directory = ~/micropsi_code

# the port on your machine where the micropsi
# toolkit is served
port = 6543

# which hosts to serve to:
# localhost serves only for you local machine,
# 0.0.0.0 serves for everybody
host = localhost

# single_agent_mode means that only one nodenet can be loaded at a time.
# if you use the minecraft connection, this is recommended
; single_agent_mode = 1

# debug flag for bottle
; debug = 1

# python profiler for recipes and the nodenet-runner
; profile_runner = 1

# automatically save running nodenets every X steps:
auto_save_intervals = 1000,10000,1000000

[minecraft]

# use your minecraft.net username with password, respective
# server address, and authenticated = True
# or else use some name, no password, and
# authenticated = False for unauthenticated servers
username = bot
password = 
authenticated = False
server = localhost
port = 25565

; simulate_vision = <some_file>
; record_vision = <some_other_file>
; debug_vision = 1

[logging]

# the logging level for system, world and nodenet.
# must be one of CRITICAL, ERROR, WARNING, INFO, DEBUG;
level_system = WARNING
level_world = WARNING
level_agent = WARNING

# an optional logfile the loggers write to
; logfile = /tmp/micropsi.log

[theano]

# floating point precision for theano_engine. 32 or 64.
precision = 32

# use sparse weight matrices. True or False.
sparse_weight_matrix = True

# number of nodes to inizialize new theano_engine partitions with
initial_number_of_nodes = 2000

# number of elements to create per node initially
# a node net with an expected ratio of concept nodes : registers of 1:1
# should use a (7 + 1) / 2 = 4 elements assumption
# pure register partitions can use a 1 element assumption
elements_per_node_assumption = 4
